{"version":3,"file":"static/js/75.f58a9d75.chunk.js","mappings":"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","sources":["clients/HangmanApi.ts","components/Header.tsx","hooks/Hooks.tsx","routes/HangmanStart.tsx"],"sourcesContent":["import axios from 'axios';\r\nimport config from './config.json';\r\n\r\nexport type Letter = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z';\r\n\r\nexport type Time = string;\r\n\r\nexport type GameState = {\r\n  game_id: string;\r\n  user_name: string;\r\n  answer: string;\r\n  start_time: Time;\r\n  expiration_time?: Time;\r\n  description?: string;\r\n  guesses: {\r\n    letter: Letter;\r\n    time: Time;\r\n    is_correct: boolean;\r\n  }[];\r\n};\r\n\r\nexport type Leaderboard = {\r\n  game_id: string;\r\n  user_name: string;\r\n  answer: string;\r\n  total_time: number;\r\n};\r\n\r\nexport default class HangmanApi {\r\n  public static LETTERS: Letter[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\r\n\r\n  public static async createGame(user_name: string) {\r\n    try {\r\n      const response = await axios.post<GameState>(\r\n        `${config.api_host_url}/game`,\r\n        {\r\n          user_name,\r\n          time_limit: {\r\n            type: \"Cumulative\",\r\n            initial_ms: 60000,\r\n            correct_guess_ms: 5000,\r\n            wrong_guess_ms: -5000\r\n          }\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  public static async getGame(gameId: string) {\r\n    try {\r\n      const response = await axios.get<GameState>(\r\n        `${config.api_host_url}/game/${gameId}`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  public static async createGuess(gameId: string, letter: string) {\r\n    try {\r\n      const response = await axios.post<GameState>(\r\n        `${config.api_host_url}/game/${gameId}/guess/${letter}`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  public static async getLeaderboard() {\r\n    try {\r\n      const response = await axios.get<Leaderboard[]>(\r\n        `${config.api_host_url}/leaderboard`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n}","import { useCallback, useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useWindowSize } from \"../hooks/Hooks\";\nimport \"./Header.css\";\n\nexport default function Header() {\n  const { pathname } = useLocation();\n  const size = useWindowSize();\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const toggleExpanded = useCallback(() => {\n    setIsExpanded((prev) => !prev);\n  }, []);\n\n  const links = [\n    {\n      name: \"Home\",\n      to: \"/\",\n      selected: pathname === \"/\",\n    },\n    {\n      name: \"Hangman\",\n      to: \"/hangman\",\n      selected: pathname.startsWith(\"/hangman\"),\n    },\n    {\n      name: \"Resume\",\n      to: \"/resume\",\n      selected: pathname.startsWith(\"/resume\"),\n    },\n  ];\n\n  let linkItems: JSX.Element;\n  if (size.width > 450) {\n    linkItems = (\n      <>\n        {links.map((link) => (\n          <span key={link.name} className=\"header-float-left\">\n            <Link className=\"header-button-link\" to={link.to}>\n              {link.name}\n            </Link>\n          </span>\n        ))}\n      </>\n    );\n  } else {\n    linkItems = (\n      <span\n        onClick={toggleExpanded}\n        className=\"material-icons-round header-hamburger\"\n      >\n        menu\n      </span>\n    );\n  }\n\n  return (\n    <div className=\"header-content\">\n      <div className=\"header-top-row\">\n        {linkItems}\n        <span className=\"header-float-right\">\n          <Link className=\"header-button-link\" to=\"/resume\">\n            Ben McAllister\n            <img src=\"/ben.jpg\" className=\"header-spinning-image\" alt=\"ben\" />\n          </Link>\n        </span>\n      </div>\n      {isExpanded &&\n        links.map((link) => (\n          <div key={link.name} className=\"header-row\">\n            <Link className=\"header-button-link\" to={link.to}>\n              {link.name}\n            </Link>\n          </div>\n        ))}\n    </div>\n  );\n}\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { Time } from \"../clients/HangmanApi\";\r\n\r\nexport function useWindowSize() {\r\n  const [size, setSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n\r\n  const updateSize = useCallback(() => {\r\n    setSize({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", updateSize);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", updateSize);\r\n    };\r\n  });\r\n\r\n  return size;\r\n}\r\n\r\nexport function useIsExpired(time?: Time): boolean | undefined {\r\n  const [isExpired, setIsExpired] = useState<boolean>();\r\n\r\n  useEffect(() => {\r\n    if (time === undefined) {\r\n      setIsExpired(undefined);\r\n      return;\r\n    }\r\n    const end = Date.parse(time);\r\n    const msLeft = end - new Date().getTime();\r\n    if (msLeft > 0) {\r\n      setIsExpired(false);\r\n      const t = setTimeout(() => {\r\n        setIsExpired(true);\r\n      }, msLeft);\r\n\r\n      return () => {\r\n        clearTimeout(t);\r\n      };\r\n    } else {\r\n      setIsExpired(true);\r\n    }\r\n  }, [time]);\r\n\r\n  return isExpired;\r\n}\r\n\r\nexport function useMsRemaining(time: Time): number {\r\n  const [msRemaining, setMsRemaining] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const end = Date.parse(time);\r\n    const msLeft = Math.max(0, end - new Date().getTime());\r\n    setMsRemaining(msLeft);\r\n    if (msLeft > 0) {\r\n      const interval = setInterval(() => {\r\n        const msLeft = Math.max(0, end - new Date().getTime());\r\n        setMsRemaining(msLeft);\r\n        if (msLeft <= 0) {\r\n          clearInterval(interval);\r\n        }\r\n      }, 90);\r\n\r\n      return () => {\r\n        clearInterval(interval);\r\n      };\r\n    }\r\n  }, [time]);\r\n\r\n  return msRemaining;\r\n}\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport HangmanApi, { Leaderboard } from \"../clients/HangmanApi\";\r\nimport Header from \"../components/Header\";\r\nimport \"./HangmanStart.css\";\r\n\r\nexport default function HangmanStart() {\r\n  const navigate = useNavigate();\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [leaderboard, setLeaderboard] = useState<Leaderboard[]>();\r\n  const [error, setError] = useState<string>();\r\n\r\n  const onUserNameChange = useCallback(\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setUserName(event.target.value);\r\n    },\r\n    []\r\n  );\r\n\r\n  const onClick = useCallback(async () => {\r\n    setLoading(true);\r\n    localStorage.setItem(\"userName\", userName);\r\n    const response = await HangmanApi.createGame(userName);\r\n    if (!response) {\r\n      setError(\"Error creating game\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    navigate(`/hangman/${response.game_id}`);\r\n  }, [navigate, userName]);\r\n\r\n  const onUserNameKeyDown = useCallback(\r\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n      if (event.key === \"Enter\") {\r\n        onClick();\r\n      }\r\n    },\r\n    [onClick]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const prevUserName = localStorage.getItem(\"userName\");\r\n    if (prevUserName) {\r\n      setUserName(prevUserName);\r\n    }\r\n    async function loadLeaderboard() {\r\n      const response = await HangmanApi.getLeaderboard();\r\n      if (response) {\r\n        setLeaderboard(response);\r\n      }\r\n    }\r\n    loadLeaderboard();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"hangman-start-content\">\r\n        <input\r\n          className=\"hangman-start-user-input\"\r\n          type=\"text\"\r\n          onChange={onUserNameChange}\r\n          value={userName}\r\n          placeholder=\"Your name\"\r\n          onKeyDown={onUserNameKeyDown}\r\n        />\r\n        <div\r\n          onClick={loading ? undefined : onClick}\r\n          className=\"hangman-start-button\"\r\n        >\r\n          Start Game\r\n        </div>\r\n        {error}\r\n        {leaderboard && (\r\n          <table className=\"hangman-start-leaderboard\">\r\n            <thead>\r\n              <tr>\r\n                <th>Place</th>\r\n                <th>User Name</th>\r\n                <th>Answer</th>\r\n                <th>Total Time</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {leaderboard.map((boardItem, index) => (\r\n                <tr key={index}>\r\n                  <td>{index + 1}.</td>\r\n                  <td>{boardItem.user_name}</td>\r\n                  <td>{boardItem.answer}</td>\r\n                  <td>{Math.round(boardItem.total_time / 100) / 10}s</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"names":["HangmanApi","user_name","axios","config","time_limit","type","initial_ms","correct_guess_ms","wrong_guess_ms","response","data","console","error","gameId","letter","LETTERS","Header","linkItems","pathname","useLocation","size","useWindowSize","useState","isExpanded","setIsExpanded","toggleExpanded","useCallback","prev","links","name","to","selected","startsWith","width","map","link","className","onClick","src","alt","window","innerWidth","height","innerHeight","setSize","updateSize","useEffect","addEventListener","removeEventListener","useIsExpired","time","isExpired","setIsExpired","undefined","msLeft","Date","parse","getTime","t","setTimeout","clearTimeout","useMsRemaining","msRemaining","setMsRemaining","end","Math","max","interval","setInterval","clearInterval","HangmanStart","navigate","useNavigate","userName","setUserName","loading","setLoading","leaderboard","setLeaderboard","setError","onUserNameChange","event","target","value","localStorage","setItem","game_id","onUserNameKeyDown","key","prevUserName","getItem","loadLeaderboard","onChange","placeholder","onKeyDown","boardItem","index","answer","round","total_time"],"sourceRoot":""}